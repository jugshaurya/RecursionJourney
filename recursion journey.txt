1.)Basics:
	a)Intro to recursion 
	b)Recursion and PMI
	c)code: Power--> Write a program to find x to the power n (i.e. x^n). Take x and n from the user.
	d)code: Print Numbers-->Given the code to print number from 1 to n in increasing order recursively.
	e)code: Number of Digits--> Given the code to find out and return the number of digits present in a number recursively.

2.)Fibonnaci number
3.)Recursion on Arrays--> shift arrays by changing arr to arr+1
	a)code: sum of array  ->Given an array of length N, you need to find and return the sum of all elements of the array.
	b)code: checkNumber-->Given an array of length N and an integer x, you need to find if x is present in the array or not. Return true or false.
	c)code: First Index of Number-->    Given an array of length N and an integer x, you need to find and return the first index of integer x present in the array. Return -1       if it is not present in the array.    First index means, the index of first occurrence of x in the input array.
	d)code: Last Index of Number-->Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return -1 if it is not present in the array.    Last index means - if x is present multiple times in the array, return the index at which x comes last in the array. You should start traversing your array from 0, not from (N - 1).
	e)All Indices of Number-->Given an array of length N and an integer x, you need to find all the indexes where x is present in the input array. Save all the indexes in an array (in increasing order).   Do this recursively. Indexing in the array starts from 0.
4.)Recursion on strings--> for getting small string use str.substr(x);
    	a) code: Replace Character Recursively-->Given an input string S and two characters c1 and c2, you need to replace every occurrence of character c1 with character c2 in the given string .
    	b)Remove Duplicates Recursively  Given a string S, remove consecutive duplicates from it recursively.
 	c)Merge Sort
 	d)Quick Sort
	e)code:  return subsequences of a string  
	 f)code:  return keypad  code of a string-->Given an integer n, using phone keypad find out all the possible strings that can be made using digits of input n.  Return empty string for numbers 0 and 1.
	g)code:  print subsequences of a string
	h)code:  print keypad of a string-->Given an integer n, using phone keypad find out and print all the possible strings that can be made using digits of input n.  Note : The order of strings are not important. Just print different strings in new lines.
	i) code: Check AB
Suppose you have a string made up of only 'a' and 'b'. Write a recursive function that checks if the string was generated using the following rules:
a. The string begins with an 'a'.
b. Each 'a' is followed by nothing or an 'a' or "bb".
c. Each "bb" is followed by nothing or an 'a'.
If all the rules are followed by the given string, return true otherwise return false.
j) code: Staircase  ->
A child is running up a staircase with N steps, and can hop either 1 step, 2 steps or 3 steps at a time. Implement a method to count how many possible ways the child can run up to the stairs. You need to return number of possible ways W.
k) code:  binary Search (Recursively)
l)code : Return subset of an array-->  Given an integer array (of length n), find and return all the subsets of input array.  Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.  Note : The order of subsets are not important.
Input format : 
Line 1 : Size of array		Line 2 : Array elements (separated by space)
solution points: either  take vector as solution array because we can find out size using v,size()   or if taking array then you need to store number of elements in array at the very first index.
m) code: print subsets of array
n) code: return all subsets sum equal to k
0) code: print all subsets sum equal to k
p)  code: Return all codes - String
q)   code: Print all Codes - String
r)  code: Return Permutations - String
s)  code:  Print Permutations - String
